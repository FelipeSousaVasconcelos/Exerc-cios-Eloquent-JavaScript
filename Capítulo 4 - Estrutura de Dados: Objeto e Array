/*Felipe José de Sousa Vasconcelos
Date: 08/11/2016
Exercícios capítulo Estrutura de Dados: Objeto e Array*/
//**************************************************************************************************************************************
//1. A soma de um intervalo

function range_(start,end,inc) {
  var vetor=[];	
  
	if (arguments.length == 2 && start<end) inc = 1;
	else if (arguments.length == 2 && start>end) inc = -1;

	for(var count=0; ; count++){
		vetor[count]=start;
		start+=inc;

		if (inc>0 && vetor[count]>=end) {
			if (vetor[count]>end) vetor.pop();
			break;
		}

		if (inc<0 && vetor[count]<=end) {
			if (vetor[count]<end) vetor.pop();
			break;
		}  
	}		
  return vetor;
}

function sum_(vetor) {
	var soma = 0;	  

	for(var count=0;count<vetor.length ; count++) soma+=vetor[count];
	
  return soma;
}

console.log(range_(1, 17,3));
console.log(sum_(range_(1, 17,3))); //  55
console.log(range_(5, 2, -1));      //  [5, 4, 3, 2]

//**************************************************************************************************************************************
//2. Invertendo um array

function reverseArray(vetor) {
	var vetor2 = [];	  

	for(var count=0;count<vetor.length ; count++) vetor2.unshift(vetor[count]);
	
  return vetor2;
}

function reverseArrayInPlace(vetor) {
	var aux, aux2;
	var aux3 = vetor.length-1;
	
	if (vetor.length%2 == 0) aux2 = vetor.length/2;
	else aux2 = Math.floor(vetor.length/2);
	
	for(var count=0;count<aux2 ; count++) {
		aux = vetor[count];
		vetor[count] = vetor[aux3];
		vetor[aux3] = aux;
		aux3--;
	}	
	
  return vetor;
}

console.log(reverseArray(["A", "B", "C"]));
// → ["C", "B", "A"];
var arrayValue = [1, 2, 3, 4, 5];
reverseArrayInPlace(arrayValue);
console.log(arrayValue);
// → [5, 4, 3, 2, 1]
//**************************************************************************************************************************************
//3. A lista

function arrayToList(vetor) {
	
	var list = null;
		
	for(var count = vetor.length - 1; count >= 0; count--) {
	    	list = {
			value: vetor[count], 
			rest: list
		}
	}	
	
  return list;
}

function listToArray(lista) {
	
	var vetor = [];
	var aux = 0;
		
	for (var node = lista; node; node = node.rest){
	    	vetor[aux] = node.value;
		aux++;
	}	
	
  return vetor;
}

function prepend(num, lista) {	
	return lista = {
		value: num, 
		rest: lista
	}		
}

function nth(lista, num) {
	var index = 0;
	for (var node = lista; node; node = node.rest){
	    	if(num == index) return node.value;
		index++;
	}	
}

function nth_recur(lista, num) {
	if(!lista) return undefined;
	else if(num == 0) return lista.value
	else return nth(lista.rest, num - 1);
}

console.log(arrayToList([10, 20, 30]));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(listToArray(arrayToList([10, 20, 30, 40, 50])));
// → [10, 20, 30, 40, 50]
console.log(prepend(10, prepend(20, null)));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(nth(arrayToList([-10, 20, 30]),1));
// → 20
console.log(nth_recur(arrayToList([-10, 20, 30]),1));
// → 20
//**************************************************************************************************************************************
//3. Deep comparison

function deepEqual(x, y) {
	var aux1=0, aux2=0;
	
	if((typeof x != "object") || (typeof y != "object") || x == null || y == null){
		if(x === y) return true;
		else return false;
	}
	
	for (var prop in x) aux1++;
	
	for (var prop in y) {
	aux2++;
	if (!(prop in x) || !deepEqual(x[prop], y[prop]))
      	return false;
	}
		
  return aux1 == aux2;
}

var obj = {here: {is: "an"}, object: 2};
console.log(deepEqual(obj, obj));
// → true
console.log(deepEqual(obj, {here: 1, object: 2}));
// → false
console.log(deepEqual(obj, {here: {is: "an"}, object: 2}));
// → true











